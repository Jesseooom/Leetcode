// 翻转单词顺序列
// 这是一种较为通用的解法，其中，sb.insert(pos, c)表示在pos位置插入字符
public class Solution {
    public String ReverseSentence(String str) {
        int pos=0;
        StringBuilder sb=new StringBuilder();
        for(int i=0;i<str.length();i++){
            char c=str.charAt(i);
            if(c==' '){
             pos=0;
            }
            sb.insert(pos, c);
            if(c!=' '){
             pos++;
            }
        }
        return sb.toString();
    }
}

// 第二张解法利用java自带的String.split()函数，该函数将指定的分隔符作为分割点
// 但是当n个分隔符连一起时会返回n个空格，而且若第一个为空格，则会返回空格。

    public static String ReverseSentence(String str) {
        //一定要先把头和尾的空格去掉
		if(str.trim().length() == 0)
            return str;
        String [] temp = str.split(" ");
        String res = "";
        for(int i = temp.length - 1; i >= 0; i--){
            res += temp[i];
            if(i != 0)
                res += " ";
        }
        return res;
    }
	
// 字符串排列
// 这个题需要用递归来求解

    ArrayList<String> res = new ArrayList<>();
    public ArrayList<String> Permutation(String str) {
        if(str == null) return res;
        char[] cstr = str.toCharArray();
        Permutation(cstr, 0);
		//注意这是Collections
        Collections.sort(res);
        return res;
    }
    
    public void Permutation(char[] str, int i){
        if(i == str.length - 1)
            res.add(String.valueOf(str));
        for(int j = i; j < str.length; j++){
            if(j != i && str[i] == str[j])	 //这是为了防止出现重复的字符串
                continue;
			// 这里注意交换完成的字符串还是要归位的,因为下一次循环的时候若不归位，则会产生重复元素
            swap(str, i, j);
            Permutation(str, i+1);
            swap(str, i, j);
        }
    }
    
    public void swap(char[] str, int i, int j){
        char temp = str[i];
        str[i] = str[j];
        str[j] = temp;
    }