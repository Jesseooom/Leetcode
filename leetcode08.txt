C++ //
class Solution {
public:
    int myAtoi(string str) {
    	int sign = 1;
    	int num = 0;
        int i = 0;
    	while(str[i] == ' '){i++;}
    	if(str[i] == '-'|| str[i] == '+') {
            sign = 1 - 2 * (str[i++] == '-');
        }
    	while(str[i] >= '0' && str[i] <= '9'){
    		if(num > INT_MAX / 10 || (num == INT_MAX / 10 && str[i] - '0' > 7)){ //这个边界判定很重要  MIN_VALUE: -2147483648 MAX_VALUE: 2147483647 
    			if(sign == 1) 
    				return INT_MAX;
    			else 
    				return INT_MIN;
            }
    	num = num * 10 + (str[i++] - '0');
        }
        return sign*num;
	}
};

Java // Java要注意String下标越界的问题，会抛出异常！！！

class Solution {
    public int myAtoi(String str) {
        int index = 0, sign = 1, total = 0;
        if(str.length() == 0) return 0;

        while(index < str.length() && str.charAt(index) == ' ')
            index++;

        if(index < str.length() && (str.charAt(index) == '+' || str.charAt(index) == '-')) {
            sign = str.charAt(index) == '+' ? 1 : -1;
            index++;
        }
        
        if(index < str.length() && !Character.isDigit(str.charAt(index))) return 0;
        
        int result = 0;
        while(index < str.length()) {
            if(!Character.isDigit(str.charAt(index))) break;
            char current = str.charAt(index++);
            int previous = result;
            result *= 10;
            if(previous != result/10) {
                return sign == -1 ? Integer.MIN_VALUE : Integer.MAX_VALUE;
            }
            result += (current - '0');
            if(result < 0) {
                return sign == -1 ? Integer.MIN_VALUE : Integer.MAX_VALUE;
            }
        }
        return result * sign;
    }

}