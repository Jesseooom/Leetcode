// 反转链表
/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/
public class Solution {
    public ListNode ReverseList(ListNode head) {
        if(head == null || head.next == null) return head;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        ListNode tail = dummy;
        ListNode temp = dummy;
		//这段代码可用于反转k链表
        while(tail.next != null) tail = tail.next;
        head = prev.next;
        while(prev.next != tail){
            temp = prev.next;
            prev.next = temp.next;
            temp.next = tail.next;
            tail.next = temp;
        }
        tail = head;
        prev = head;
        return dummy.next;
    }
}

// 合并两个排序链表
	// 递归解法
	public class Solution {
		public ListNode Merge(ListNode list1,ListNode list2) {
			if(list1 == null) return list2;
			if(list2 == null) return list1;
			ListNode res = null;
			if(list1.val < list2.val){
				res = list1;
				res.next = Merge(list1.next, list2);
			}else{
				res = list2;
				res.next = Merge(list1, list2.next);
			}
			return res;
		}
	}

	// 非递归解法
	public class Solution {
		public ListNode Merge(ListNode list1,ListNode list2) {
			if(list1 == null) return list2;
			if(list2 == null) return list1;
			ListNode head = null;
			if(list1.val <= list2.val){
				head = list1;
				list1 = head.next;
			}else{
				head = list2;
				list2 = head.next;
			}
			ListNode cur = head;
			while(list1 != null && list2 != null){
				if(list1.val <= list2.val){
					cur.next = list1;
					cur = list1;
					list1 = list1.next;
				}else{
					cur.next = list2;
					cur = list2;
					list2 = list2.next;
				}
			}
			while(list1 != null){
				cur.next = list1;
				cur = list1;
				list1 = list1.next;
			}
			while(list2 != null){
				cur.next = list2;
				cur = list2;
				list2 = list2.next;
			}
			return head;
		}
	}
	
// 两个链表的第一个公共节点
// 暴力法，先行法

    public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {
        ListNode p1 = pHead1;
        ListNode p2 = pHead2;
        while(p1 != null){
            p2 = pHead2;              //这里开始的时候忘记了初始化p2，记住！用while代替for的时候记得初始化！
            while(p2 != null){
                if(p1 == p2) {
                    return p1;
                }
                p2 = p2.next;
            }
            p1= p1.next;
        }
        return null;
    }
	
	
	public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {
	ListNode p1 = pHead1;
	ListNode p2 = pHead2;
	int len1 = 0; int len2 = 0;
	while(p1 != null){
		len1++;
		p1 = p1.next;               //这里一ing要注意，毕额忘记了链表的递增
	}
	while(p2 != null){
		len2++;
		p2 = p2.next;              ////这里一ing要注意，毕额忘记了链表的递增 
	}
	p1 = pHead1;
	p2 = pHead2;
	if(len1 > len2){
		for(int i = 0; i < len1 - len2; i++){
			p1 = p1.next;
		}
	}else{
		for(int i = 0; i < len2 - len1; i++){
			p2 = p2.next;
		}
	}
	while(p1 != null && p2 != null){
		if(p1.val == p2.val) return p1;
		p1 = p1.next;
		p2 = p2.next;
	}
	return null;
}

// 删除链表中重复的节点
// 
     public ListNode deleteDuplication(ListNode pHead)
    {
        ListNode dummy = new ListNode(0);
        if(pHead == null) return pHead;
        dummy.next = pHead;
        ListNode p = pHead;
        while(p != null){
            if(p.next != null && p.val == p.next.val){
                ListNode temp = p;
                while(p.next != null && p.next.val == p.val)
                    p = p.next;
                p = p.next;
                ListNode start = dummy;
                while(start.next.val != temp.val)
                    start = start.next;
                start.next = p;
            }else{
                p = p.next;
            }
        }
        return dummy.next;
    }
}