// 最小的k个数
// 	堆方法
// 	冒泡排序前k轮
// 	快速排序

	import java.util.*;
	public class Solution {
		public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
			Arrays.sort(input);
			ArrayList<Integer> res = new ArrayList<>();
			if(k > input.length || k <= 0) return res;
			for(int i = 0;i < k;i ++){
				res.add(input[i]);
			}
			return res;
		}
	}
	
// 数组中1出现的次数
// 	暴力解法
// 	非暴力解法

	public class Solution {
		public int NumberOf1Between1AndN_Solution(int n) {
			int res = 0;
			for(int i = 1; i <= n; i++){
				res = res + count(i);
			}
			return res;
		}
		public static int count(int num){
			int res = 0;
			if(num == 0) return 0;
			while(num != 0){
				if(num % 10 == 1) res++;
				num = num / 10;
			}
			return res;
		}
	}

// 第一次只出现一次的数
// 代码很精简

public class Solution {
    public int FirstNotRepeatingChar(String str) {
        char[] c = str.toCharArray();
        int[] hash = new int['z'+1];
        boolean flag = false;
        for(char i : c){
            hash[i]++;
        }
        for(int i = 0; i < c.length; i++){
            if(hash[c[i]] == 1) {
            	return i;
            }
        }
        return -1;
    }
}

// 扑克牌顺子

    public boolean isContinuous(int [] numbers) {
        Arrays.sort(numbers);
        int len = numbers.length;
        if(len == 0) return false;
        int count_0 = 0;
        for(int i = 0; i < len; i++){
            if(numbers[i] == 0) count_0 ++;
        }
        for(int i = count_0 + 1; i < len; i++){
            int num = numbers[i] - numbers[i - 1];
            if(num == 1)
                continue;
            else if(num > 1){                    // 特别注意，这里需要判断num等于1   !!!!!
                if(count_0 >= num - 1)
                    count_0 = count_0 - num + 1;
                else
                    return false;
            }else{
                return false;
            }
        }
        return true;
    }
	
// 把字符串转换为整数
// 先数据预处理，然后计算就可以了

    public int StrToInt(String str) {
        if(str.length() == 0) return 0;
        char[] str1 = str.toCharArray();
        int k; int coef; int res = 0;
        if(str1[0] == '+'){
            coef = 1;
            k = 1;
        }else if(str1[0] == '-'){
            coef = -1;
            k = 1;
        }else{
            coef = 1;
            k = 0;
        }
        for(int i = k; i < str1.length; i++){
            if(str1[i] < '0' || str1[i] > '9')
                return 0;
        }
        for(int i = k; i < str1.length; i++){
            res = res * 10 + (str1[i] - '0');
        }
        return res * coef;
    }
	
// 孩子们的游戏
// 模拟数组，也可以通过递推公式求解

    public int LastRemaining_Solution(int n, int m) {
        int len = n;
        int[] array = new int[len];
        for(int j = 0; j < len; j++) array[j] = j;
        int i = -1;
        int step = 0;
        while(len > 0){
            i ++;
            if(i >= n) i = 0;
            if(array[i] == -1) continue;
            step ++;
            if(step == m){
                array[i] = -1;
                step = 0;
                len --;
            }
        }
        return i;
    }
	
// 构建乘积数组（要求不能使用乘法）
// 思路是用若用暴力求解，时间复杂度太高，于时想着空间换时间，于时可以把乘积存起来成为数组；

    public int[] multiply(int[] A) {
        int len = A.length;
        int[] B = new int[len];
        int[] C = new int[len];
        int[] D = new int[len];
        C[0] = 1;
        D[len - 1] = 1;
        for(int i = 1; i < len; i ++){
            C[i] = C[i - 1] * A[i - 1];
        }
        for(int j = len - 2; j >= 0; j --){
            D[j] = D[j + 1] * A[j + 1];
        }
        for(int k = 0; k < len; k ++){
            B[k] = C[k] * D[k];
        }
        return B;
    }
	
// 链表中环的入口

    public ListNode EntryNodeOfLoop(ListNode pHead)
    {
        if(pHead == null || pHead.next == null) return null;
        ListNode p1 = pHead;
        ListNode p2 = pHead;
        boolean flag = false;
        do{
            p1 = p1.next;
            p2 = p2.next.next;
            if(p1 == p2){                       //这里坑了。自己没加括号，因此换行不加括号不是好习惯，要么加括号换行，要么不加括号不换行
                flag = true;
                break;
            }
        }while(p2 != null && p2.next != null);
        if(flag == false) return null;
        else{
            int count = 0;
            do{
                p2 = p2.next;
                count ++;
            }while(p1 != p2);
            p1 = pHead;
            p2 = pHead;
            for(int i = 0; i < count; i++) p2 = p2.next;
            while(p1 != p2){
                p1 = p1.next;
                p2 = p2.next;
            }
        }
        return p1;
    }